/* Start Header =========================================================================
File Name:		Vector3.cpp
Purpose:		Implements a 3-Vector.
Language:		C++, Visual Studio 2013 compiler
Author:			Hew Jun-Wei
== End Header =========================================================================*/

// Includes:
//---------------------------------------------------------------------------------------
#include "Vector.h"
#include <cmath>	// sqrt()


/***************************************************************************************/
/***************************************************************************************/
Vector3::Vector3() : x(0.0f), y(0.0f), z(0.0f) {}


/***************************************************************************************/
/***************************************************************************************/
Vector3::~Vector3() {}


/***************************************************************************************/
/***************************************************************************************/
Vector3::Vector3(float x, float y, float z)
{
	this->x = x;
	this->y = y;
	this->z = z;
}


/***************************************************************************************/
/***************************************************************************************/
Vector3::Vector3(const Vector3& v)
{
	x = v.x;
	y = v.y;
	z = v.z;
}


/****************************************************************************************
Overloading the * operator to represent the dot product.
****************************************************************************************/
float Vector3::operator*(const Vector3& rhs) const
{
	return (x * rhs.x) + (y * rhs.y) + (z * rhs.z);
}


/***************************************************************************************/
/***************************************************************************************/
Vector3 Vector3::operator+(const Vector3& rhs) const
{
	return Vector3(x + rhs.x, y + rhs.y, z + rhs.z);
}


/***************************************************************************************/
/***************************************************************************************/
Vector3 Vector3::operator-(const Vector3& rhs) const
{
	return Vector3(x - rhs.x, y - rhs.y, z - rhs.z);
}


/***************************************************************************************/
/***************************************************************************************/
Vector3 Vector3::operator/(const float rhs) const
{
	return Vector3(x / rhs, y / rhs, z / rhs);
}


/***************************************************************************************/
/***************************************************************************************/
Vector3& Vector3::operator+=(const Vector3& rhs)
{
	x += rhs.x;
	y += rhs.y;
	z += rhs.z;
	return *this;
}


/***************************************************************************************/
/***************************************************************************************/
Vector3& Vector3::operator-=(const Vector3& rhs)
{
	x -= rhs.x;
	y -= rhs.y;
	z -= rhs.z;
	return *this;
}


/***************************************************************************************/
/***************************************************************************************/
Vector3& Vector3::operator*=(const float rhs)
{
	x *= rhs;
	y *= rhs;
	z *= rhs;
	return *this;
}


/***************************************************************************************/
/***************************************************************************************/
Vector3& Vector3::operator/=(const float rhs)
{
	x /= rhs;
	y /= rhs;
	z /= rhs;
	return *this;
}


/***************************************************************************************/
/***************************************************************************************/
Vector3& Vector3::operator=(const Vector3& rhs)
{
	x = rhs.x;
	y = rhs.y;
	z = rhs.z;
	return *this;
}


/****************************************************************************************
Overloading the % operator to represent the cross product.
****************************************************************************************/
Vector3 Vector3::operator%(const Vector3& rhs) const
{
	return Vector3( (y * rhs.z) - (z * rhs.y),
					(z * rhs.x) - (x * rhs.z),
					(x * rhs.y) - (y * rhs.x) );
}


/***************************************************************************************/
/***************************************************************************************/
Vector3 Vector3::operator-() const
{
	return Vector3(-x, -y, -z);
}


/***************************************************************************************/
/***************************************************************************************/
bool Vector3::operator==(const Vector3& rhs) const
{
	if (fabs(x - rhs.x) > static_cast<float>(1.e-5))
		return false;

	if (fabs(y - rhs.y) > static_cast<float>(1.e-5))
		return false;

	if (fabs(z - rhs.z) > static_cast<float>(1.e-5))
		return false;

	return true;
}


/***************************************************************************************/
/***************************************************************************************/
float Vector3::Length() const
{
	return sqrt((*this) * (*this));
}


/***************************************************************************************/
/***************************************************************************************/
float Vector3::SquaredLength() const
{
	return (*this) * (*this);
}


/***************************************************************************************/
/***************************************************************************************/
Vector3 Vector3::Normalize() const
{
	return (*this) / Length();
}


/***************************************************************************************/
/***************************************************************************************/
Vector3& Vector3::NormalizeThis()
{
	(*this) /= Length();
	return *this;
}


/***************************************************************************************/
/***************************************************************************************/
Vector3 operator*(const float lhs, const Vector3& rhs)
{
	return Vector3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z);
}